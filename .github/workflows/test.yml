name: Test

on:
    push:
        branches:
            - main


jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

  
    - name: Create .env file
      run: |
        cat <<EOF > .env.test
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        REFRESH_TOKEN_EXPIRE_MINUTES=20160
        PG_DATABASE=postgres
        PG_USER=${{ secrets.PG_USER }}
        PG_PASSWORD=${{ secrets.PG_PASSWORD }}
        DB_HOST=pgdb
        DB_PORT=${{ secrets.DB_PORT }}
        EOF

    - name: Debug .env location
      run: |
        echo "Current directory: $(pwd)"
        echo ".env content:"
        cat .env.test

    - name: Install docker-compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Build Docker containers
      run: |
        docker-compose -f docker-compose.test.yml build

    - name: Start containers
      run: |
        docker-compose -f docker-compose.test.yml up -d

    - name: Wait for web container to be ready
      run: sleep 3  # –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ healthcheck

    - name: –º–∏–≥—Ä–∞—Ç–∏–æ–Ω—Å—ã
      run: |
        docker exec test_app bash -c "tests/alembic upgrade heads"

    - name: Run pytest inside web container
      run: |
        docker exec test_app bash -c "pytest tests/ | tee /tmp/test_output.txt"
        docker cp test_app:/tmp/test_output.txt ./test_output.txt

    # - name: Send result to Telegram
    #   run: |
    #     TEXT=$(tail -n 30 test_output.txt | sed 's/"/\\"/g')
    #     curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
    #     -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
    #     -d text="üß™ Test Results:\n\`\`\`\n$TEXT\n\`\`\`" \
    #     -d parse_mode=Markdown

    - name: Shutdown containers
      if: always()
      run: docker-compose -f docker-compose.test.yml down

              

# docker-compose -f docker-compose.test.yml build
# docker-compose -f docker-compose.test.yml up
# docker exec -it web bash
# pytest tests/

# platform linux -- Python 3.11.7, pytest-8.3.5, pluggy-1.5.0
# rootdir: /usr/src/app
# configfile: pytest.ini
# plugins: anyio-4.9.0, asyncio-0.26.0
# asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
# collected 1 item                                                                                                                                                               

# tests/test_users/test_user_service.py .                                                                                                                                  [100%]

# ============================================================================== 1 passed in 1.23s ===============================================================================
# root@90f449107bdf:/usr/src/app# 


# =========================================================================== short test summary info ============================================================================
# FAILED tests/test_users/test_user_service.py::test_user_created_with_settings - assert 1 == 0
# ============================================================================== 1 failed in 1.73s ===============================================================================



# –µ–Ω–≤ –§–ê–ô–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ–õ

# DATABASE_URL=postgresql+asyncpg://test:test@test_db:5432/postgres
# SECRET_KEY=gg0p6dtbb$*d@cviha6byk@76c4wv&n_ap)&728izh3+vru*f
# ALGORITHM = "HS256"
# ACCESS_TOKEN_EXPIRE_MINUTES = 30
# REFRESH_TOKEN_EXPIRE_MINUTES = 20160
# PG_DATABASE=postgres
# PG_USER=test
# PG_PASSWORD=test
# DB_HOST=pgdb
# DB_PORT=5432